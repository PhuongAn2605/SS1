# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'driver.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def __init__(self):
        self.i = 0
        self.string = []
        self.length = len(self.string)
        self.ans = list(range(10))
        self.total_num_wr = 0
        self.total_num_cor = 0

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(569, 504)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setGeometry(QtCore.QRect(70, 20, 71, 41))
        self.btn_start.setObjectName("btn_start")
        self.try_again = QtWidgets.QPushButton(self.centralwidget)
        self.try_again.setGeometry(QtCore.QRect(430, 20, 71, 41))
        self.try_again.setObjectName("try_again")
        self.choiceA = QtWidgets.QRadioButton(self.centralwidget)
        self.choiceA.setGeometry(QtCore.QRect(70, 330, 41, 31))
        self.buttonGroup = QtWidgets.QButtonGroup(MainWindow)
        self.buttonGroup.setObjectName("buttonGroup")
        self.choiceA.setObjectName("choiceA")
        self.choiceB = QtWidgets.QRadioButton(self.centralwidget)
        self.choiceB.setGeometry(QtCore.QRect(200, 330, 41, 31))
        self.choiceB.setObjectName("choiceB")
        self.choiceC = QtWidgets.QRadioButton(self.centralwidget)
        self.choiceC.setGeometry(QtCore.QRect(340, 330, 41, 31))
        self.choiceC.setObjectName("choiceC")
        self.choiceD = QtWidgets.QRadioButton(self.centralwidget)
        self.choiceD.setGeometry(QtCore.QRect(460, 330, 41, 31))
        self.choiceD.setObjectName("choiceD")
        self.prev = QtWidgets.QPushButton(self.centralwidget)
        self.prev.setGeometry(QtCore.QRect(70, 380, 61, 41))
        self.prev.setObjectName("prev")
        self.next = QtWidgets.QPushButton(self.centralwidget)
        self.next.setGeometry(QtCore.QRect(440, 380, 61, 41))
        self.next.setObjectName("next")
        self.submit = QtWidgets.QPushButton(self.centralwidget)
        self.submit.setGeometry(QtCore.QRect(260, 410, 81, 51))
        self.submit.setObjectName("submit")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(70, 90, 431, 221))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 569, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btn_start.clicked.connect(self.displayQues)

        self.next.clicked.connect(self.nextQuestion)

        self.prev.clicked.connect(self.prevQuestion)

        self.choiceA.clicked.connect(self.chooseA)

        self.choiceB.clicked.connect(self.chooseB)

        self.choiceC.clicked.connect(self.chooseC)

        self.choiceD.clicked.connect(self.chooseD)
        self.submit.clicked.connect(self.calcTotal)

    def displayQues(self):
        ques = []
        with open('questions.txt', encoding='utf-8-sig', mode='r') as f:
            ques = f.readlines()
        ques = [x.strip() for x in ques]
        print(ques)
        ques.append('')
        # READ DATA FROM FILE
        check = ['A', 'B', 'C', 'D']
        total = 1
        tmp = ''
        c = 0
        for i in range(len(ques)):
            tmp += ques[i] + '\n'

            if ques[i] == '':
                self.string.append(tmp)
                tmp = ''
                c += 1
        self.length = c
        self.i = 0
        self.reset()
        self.textBrowser.setText(self.string[self.i])
        print(self.string)
        print(c)

    def nextQuestion(self):
        self.reset()
        if self.i == (self.length - 1):
            self.i = (self.length - 1)
        else:
            self.i += 1
            self.textBrowser.setText(self.string[self.i])

    def prevQuestion(self):
        self.reset()
        if self.i == 0:
            self.i = 0
        else:
            self.i -= 1
            self.textBrowser.setText(self.string[self.i])

    def chooseA(self):
        print(self.ans)
        self.ans[self.i] = 'A'
        print(self.ans)

    def chooseB(self):
        print(self.ans)
        self.ans[self.i] = 'B'
        print(self.ans)

    def chooseC(self):
        print(self.ans)
        self.ans[self.i] = 'C'
        print(self.ans)

    def chooseD(self):
        print(self.ans)
        self.ans[self.i] = 'D'
        print(self.ans)

    def reset(self):
        self.choiceA.setAutoExclusive(False)
        self.choiceB.setAutoExclusive(False)
        self.choiceC.setAutoExclusive(False)
        self.choiceD.setAutoExclusive(False)

        self.choiceA.setChecked(False)
        self.choiceB.setChecked(False)
        self.choiceC.setChecked(False)
        self.choiceD.setChecked(False)

        self.choiceA.setAutoExclusive(True)
        self.choiceB.setAutoExclusive(True)
        self.choiceC.setAutoExclusive(True)
        self.choiceD.setAutoExclusive(True)




    def calcTotal(self):
        with open('answer.txt', encoding='utf-8-sig', mode='r') as f:
            cor = f.readlines()
        cor = [x.strip() for x in cor]

        ques_wrong = []
        for x in range(self.length):
            if self.ans[x] != cor[x][-1:]:
                self.total_num_wr += 1
                ques_wrong.append(x + 1)

        # CALCULATE TOTAL SCORE AND EVALUATE
        self.total_num_cor = self.length - self.total_num_wr

        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Information)
        msg.setText("You {} {}!".format("have passed" if self.total_num_cor >= 5 else "haven't", "passed the exam!"))
        msg.setInformativeText("Numer of correct answers: {} \n"
                               "Number of wrong answers: {}".format(self.total_num_cor, self.total_num_wr))

        msg.setWindowTitle("Kết quả")
        msg.exec_()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Driver License Exam"))
        self.btn_start.setText(_translate("MainWindow", "Start"))
        self.try_again.setText(_translate("MainWindow", "Try again"))
        self.choiceA.setText(_translate("MainWindow", "A "))
        self.choiceB.setText(_translate("MainWindow", "B"))
        self.choiceC.setText(_translate("MainWindow", "C"))
        self.choiceD.setText(_translate("MainWindow", "D"))
        self.prev.setText(_translate("MainWindow", "Prev"))
        self.next.setText(_translate("MainWindow", "Next"))
        self.submit.setText(_translate("MainWindow", "Submit"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
